/*
* This Java source file was generated by the Gradle 'init' task.
 */
package com.trc.ccopromo;

import com.fasterxml.jackson.databind.ObjectMapper;
import com.sap.scco.ap.plugin.BasePlugin;
import com.sap.scco.ap.plugin.BreakExecutionException;

import org.eclipse.persistence.indirection.IndirectList;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import com.sap.scco.ap.plugin.annotation.ListenToExit;
import com.sap.scco.ap.plugin.annotation.PluginAt;
// import com.sap.scco.ap.plugin.annotation.ui.JSInject;
import com.sap.scco.ap.pos.service.*;
import com.sap.scco.ap.pos.service.PosService;
import com.sap.scco.ap.pos.service.ReturnSalesItemPosService;
import com.sap.scco.ap.pos.service.impl.ReturnSalesItemPosServiceImpl;
import com.trc.ccopromo.models.*;

import ch.qos.logback.core.joran.conditional.ElseAction;

import com.sap.scco.ap.pos.exception.InconsistentReceiptStateException;
import com.sap.scco.ap.pos.exception.RequestProcessingException;
import com.sap.scco.ap.pos.entity.MaterialEntity;
import com.sap.scco.ap.pos.entity.ReceiptEntity;
import com.sap.scco.ap.pos.entity.SalesItemEntity;
import java.util.ArrayList;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.function.Function;
import java.util.stream.Collector;
// import java.util.stream.Collector;
import java.util.stream.Collectors;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
// import com.google.gson.Gson; 
// import com.google.gson.GsonBuilder;
import net.sf.json.JSONObject;

import java.io.IOException;
import java.math.BigDecimal;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.time.Duration;
import com.sap.scco.env.UIEventDispatcher;
import com.sap.scco.cs.utilities.ReceiptHelper;
import com.sap.scco.ap.pos.dao.IReceiptManager;
import com.sap.scco.ap.pos.dao.*;
import com.sap.scco.ap.registry.UserRegistry;
import com.sap.scco.ap.returnreceipt.ReturnReceiptObject;
import com.sap.scco.env.UIEventDispatcher;
import com.sap.scco.util.CConst;
import com.sap.scco.util.exception.ValidationException;
import com.sap.scco.util.types.LogGDT;
import com.sap.scco.ap.pos.entity.BaseEntity;

public class TrcPromoAddon extends BasePlugin {
    // Data types
    public static final String STRING = "string";
    public static final String PASSWORD = "password";
    public static final String TEXT = "text";
    public static final String INT = "int";
    public static final String BOOLEAN = "boolean";

    public static final String SPECIAL_DISCOUNT_CALC_SERVICE_URL = "SPECIAL_DISCOUNT_CALC_SERVICE_URL";
    public static final String SPECIAL_DISCOUNT_SERVICE_USERNAME = "SPECIAL_DISCOUNT_SERVICE_USERNAME";
    public static final String SPECIAL_DISCOUNT_SERVICE_PASSWORD = "SPECIAL_DISCOUNT_SERVICE_PASSWORD";
    public static final String TRC_AUTOMATIC_DISCOUNTS_APPLIED = "TRC_AUTOMATIC_DISCOUNTS_APPLIED";
    public static final String TRC_DISCOUNT_MANUALLY_CHANGED = "TRC_DISCOUNT_MANUALLY_CHANGED";
    public static final String TRC_DISCOUNT_ID = "TRC_DISCOUNT_ID";
    public static final String TRC_DISCOUNT_NAME = "TRC_DISCOUNT_NAME";

    private static Logger logger = LoggerFactory.getLogger(TrcPromoAddon.class);
    private static AtomicBoolean currentlyCalculating = new AtomicBoolean(false);
    private static final HttpClient httpClient = HttpClient.newBuilder()
            .version(HttpClient.Version.HTTP_1_1)
            .connectTimeout(Duration.ofSeconds(10))
            .build();
    private CDBSession dbSession;
    // private PriceDiscountManager priceDiscountManager;
    // private MaterialPosService materialPosService;
    private PosService posService;
    private ReceiptPosService receiptPosService;
    private ReceiptManager receiptManager;
    // private SalesItemManager salesItemManager;
    private CalculationPosService calculationPosService;
    private SalesItemPosService salesItemPosService;
    private EntityFactory entiryFactiry;

    @Override
    public String getId() {
        return "TRCPromo";
    }

    @Override
    public String getName() {
        return "TRC Promo";
    }

    @Override
    public String getVersion() {
        return "2.0.0";
    }

    @Override
    public void startup() {
        currentlyCalculating.set(false);
        // EntityFactory.INSTANCE.
        // logger.info("222222222222222");
        // new ReceiptManager()
        this.dbSession = CDBSessionFactory.instance.createSession();
        // this.priceDiscountManager = new PriceDiscountManager(dbSession);
        this.receiptManager = new ReceiptManager(dbSession);
        // this.salesItemManager = new SalesItemManager(dbSession);
        // this.materialPosService =
        // ServiceFactory.INSTANCE.getOrCreateServiceInstance(MaterialPosService.class,
        // dbSession);
        this.receiptPosService = ServiceFactory.INSTANCE.getOrCreateServiceInstance(ReceiptPosService.class, dbSession);
        this.calculationPosService = ServiceFactory.INSTANCE.getOrCreateServiceInstance(CalculationPosService.class,
                dbSession);
        this.salesItemPosService = ServiceFactory.INSTANCE.getOrCreateServiceInstance(SalesItemPosService.class,
                dbSession);

        // priceDiscountManager.

        // receiptManager.cancelSalesItem(null, null, null, null, INT, BOOLEAN)

        super.startup();
        // currentlyCalculating.set(false);

    }

    @Override
    public boolean persistPropertiesToDB() {
        return true;
    }

    public PluginConfig getPluginConfig() {
        PluginConfig pluginConfig = new PluginConfig();
        pluginConfig.setBaseUrl(getProperty(SPECIAL_DISCOUNT_CALC_SERVICE_URL, "")); // "http://192.168.0.17:5261/api/Promo/Calculate"
        pluginConfig.setUser(getProperty(SPECIAL_DISCOUNT_SERVICE_USERNAME, null));
        pluginConfig.setPassword(getProperty(SPECIAL_DISCOUNT_SERVICE_PASSWORD, null));
        return pluginConfig;
    }

    @Override
    public Map<String, String> getPluginPropertyConfig() {
        Map<String, String> propConfig = new HashMap<>();
        propConfig.put(SPECIAL_DISCOUNT_CALC_SERVICE_URL, TEXT);
        propConfig.put(SPECIAL_DISCOUNT_SERVICE_USERNAME, STRING);
        propConfig.put(SPECIAL_DISCOUNT_SERVICE_PASSWORD, PASSWORD);
        return propConfig;
    }

    @PluginAt(pluginClass = ReceiptPosService.class, method = "voidReceipt", where = PluginAt.POSITION.BEFORE)
    public void voidReceipt(Object proxy, Object[] args, StackTraceElement caller) {
        logger.info("voidReceipt");
        // currentlyCalculating.set(false);

    }

    @PluginAt(pluginClass = ReceiptPosService.class, method = "addSalesItem", where = PluginAt.POSITION.AFTER)
    public void addSalesItem(Object proxy, Object[] args, Object objItem, Object obj)
            throws IOException, InterruptedException {
        ReceiptEntity receipt = (ReceiptEntity) args[0];
        TransactionLogic transactionLogic = new TransactionLogic(this, receiptManager, calculationPosService,
                dbSession);
        transactionLogic.CalculatePromotios(receipt);
    }

    @PluginAt(pluginClass = ReceiptPosService.class, method = "updateSalesItem", where = PluginAt.POSITION.AFTER)
    public void updateSalesItem(Object proxy, Object[] args, StackTraceElement caller, Object obj)
            throws IOException, InterruptedException {
        logger.info("updateSalesItem - before");
        ReceiptEntity receipt = (ReceiptEntity) args[0];
        TransactionLogic transactionLogic = new TransactionLogic(this, receiptManager, calculationPosService,
                dbSession);
        transactionLogic.CalculatePromotios(receipt);
    }

    @PluginAt(pluginClass = ReturnSalesItemPosService.class, method = "voidSalesItem", where = PluginAt.POSITION.AFTER)
    public void voidSalesItem(ReturnSalesItemPosServiceImpl proxy, Object[] args, Object objItem, Object obj)
            throws IOException, InterruptedException {

        if (((Object) args[0]).getClass() == ReceiptEntity.class) {
            ReceiptEntity receipt = (ReceiptEntity) args[0];
            TransactionLogic transactionLogic = new TransactionLogic(this, receiptManager, calculationPosService,
                    dbSession);
            transactionLogic.CalculatePromotios(receipt);
        }
    }

    @PluginAt(pluginClass = ReturnReceiptPosService.class, method = "moveSalesItemByQuantity", where = PluginAt.POSITION.BEFORE)
    public Object moveSalesItemByQuantityBefore(Object proxy, Object[] args, Object ret
    // , StackTraceElement caller,Object ret1
    )
            throws BreakExecutionException, IOException, InterruptedException {
                ReturnReceiptObject result = (ReturnReceiptObject) ret;
            ReceiptEntity sourceReceipt = result.getSourceReceipt();
            if(sourceReceipt.getSalesItems().stream().filter(a->a.getId().equals("PROMO_ADJUSTMENT")).findAny().isEmpty())
            sourceReceipt.getSalesItems().remove(
                sourceReceipt.getSalesItems().stream().filter(a->a.getId().equals("PROMO_ADJUSTMENT")).findFirst()
                
            );
            


                return result;
            }
    @PluginAt(pluginClass = ReturnReceiptPosService.class, method = "moveSalesItemByQuantity", where = PluginAt.POSITION.AFTER)
    public Object moveSalesItemByQuantity(Object proxy, Object[] args, Object ret, StackTraceElement caller)
            throws BreakExecutionException, IOException, InterruptedException {
        logger.info("moveSalesItemByQuantity");
        

        ReturnReceiptObject result = (ReturnReceiptObject) ret;
        ReceiptEntity targetReceipt = result.getIndividualItemsReceipt();
        ReceiptEntity sourceReceipt = result.getSourceReceipt();

        if (targetReceipt != null) {
            TransactionLogic transactionLogic = new TransactionLogic(this, receiptManager, calculationPosService,
                dbSession);
        transactionLogic.PickUpPromoTransaction(result);

            // logger.info("moveSalesItemByQuantity");
            // var _adjustmentItem=targetReceipt.getSalesItems().stream().filter(a->a.getId().equals("PROMO_ADJUSTMENT")).findFirst();
            // if(_adjustmentItem!=null)
            //     if(!_adjustmentItem.isEmpty())
            // {
            //     SalesItemEntity adjustmentItem=_adjustmentItem.get();
            //     // var qty=targetReceipt.getSalesItems().get(0).getQuantity();
            //     var finalPrice=adjustmentItem.getGrossAmount();
            //     var finalPrice1=BigDecimal.valueOf(targetReceipt.getSalesItems().stream().filter(a->!a.getId().equals("PROMO_ADJUSTMENT")).
            //     mapToDouble(a->a.getGrossAmount().doubleValue()).sum());
            //     finalPrice=finalPrice.add(finalPrice1);
            //     // finalPrice=finalPrice.add(BigDecimal.ONE);
            //     // finalPrice+=BigDecimal.valueOf(BigDecimal.valueOf(finalPrice.doubleValue()+1) );
            //     // finalPrice=
            //     adjustmentItem.setUnitNetAmount(finalPrice);
            //     adjustmentItem.setUnitNetAmountOrigin(finalPrice);
            //     adjustmentItem.setUnitGrossAmount(finalPrice);
            //     adjustmentItem.setUnitGrossAmountOrigin(finalPrice);
            //     calculationPosService.calculate(targetReceipt, BaseEntity.EntityActions.CHECK_CONS);

                
            //     // adjustmentItem.setQuantity(BigDecimal.valueOf( adjustmentItem.getQuantity().doubleValue()+qty.doubleValue()));
            //     return result;
            // }
            

            // SalesItemEntity adjustmentItem=com.sap.scco.ap.pos.dao.EntityFactory.INSTANCE.createSpecialSalesItemEntity("Promo Adjustment", BigDecimal.valueOf(10), 
            // targetReceipt.getSalesItems().get(0).getTaxRateTypeCode(), null);
            // // adjustmentItem.setGrossAmount(null);
            // // BigDecimal finalPrice = BigDecimal.valueOf(-5);
            // var finalPrice=BigDecimal.valueOf(targetReceipt.getSalesItems().stream().mapToDouble(a->a.getGrossAmount().doubleValue()).sum());
            // // price != null ? price.negate() : BigDecimal.ZERO;
            //     adjustmentItem.setUnitNetAmount(finalPrice);
            //     adjustmentItem.setUnitNetAmountOrigin(finalPrice);
            //     adjustmentItem.setUnitGrossAmount(finalPrice);
            //     adjustmentItem.setUnitGrossAmountOrigin(finalPrice);
            //     adjustmentItem.setUnitPriceChanged(true);
            //     adjustmentItem.setId("PROMO_ADJUSTMENT");
            //     adjustmentItem.setQuantity(BigDecimal.ONE);
            //     targetReceipt.addSalesItem(adjustmentItem);
            //     calculationPosService.calculate(targetReceipt, BaseEntity.EntityActions.CHECK_CONS);
            // addAdjustmentItems(result.getSourceReceipt(), targetReceipt);
        }
        return result;
    }

    // @PluginAt(pluginClass = ReturnReceiptPosService.class, method = "moveReturnedReceiptToCurrentReceipt", where = PluginAt.POSITION.AFTER)
    // public Object moveReturnedReceiptToCurrentReceipt(Object proxy, Object[] args, Object ret, StackTraceElement caller) throws BreakExecutionException {
    //     logger.info("moveReturnedReceiptToCurrentReceipt");
    //     ReceiptEntity result = (ReceiptEntity) ret;
    //     if (args.length == 8) {
    //         ReceiptEntity receiptWithAdjustmentItems = (ReceiptEntity) args[1];
    //         logger.info("args {}", args);
    //         // var adjItems=receiptWithAdjustmentItems.getSalesItems().stream().filter(a->a.getId().equals("PROMO_ADJUSTMENT")).toArray();
    //         // logger.info(adjItems.toString()); 
    //         // copyAdjustmentItems(receiptWithAdjustmentItems, result);
    //     }
    //     return result;
    // }


}
